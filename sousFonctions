#include "biblioJeu.h"

/*-----------------------------------------------------------------------------------------------------*/
///Petits sous-programmes pour éviter les répétitions

//Fonction pour quitter Allegro (pour éviter de réécrire à chaque fois)
void initialisationAllegro()
{
    allegro_init();
    set_color_depth(desktop_color_depth());
    if (set_gfx_mode(GFX_AUTODETECT_WINDOWED,1024,768,0,0)!=0)
    {
        allegro_message("Probl%cme graphique", 138);
        allegro_exit();
        exit(EXIT_FAILURE);
    }
}
/*----------------------------------------------------------------------------*/
//Fonction pour quitter Allegro
void quitterAllegro()
{
    allegro_exit();
    exit(EXIT_FAILURE);
}
/*----------------------------------------------------------------------------*/
//Affichage du bouton 'exit' en haut à gauche
void affichageBoutonExit()
{  //Dessin du bouton 'exit'
      rectfill(screen,0,0,40,20,makecol(255,255,0));
      textprintf_ex(screen,font,4,6,makecol(0,0,0),makecol(255,0,0),"EXIT");
}
/*-----------------------------------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------------------------------*/
///Fonction pour quitter le jeu à tout moment
void exitJeu()
{
    int clic=0;
    clear_bitmap(screen);

    //Création double buffer fond noir
    /******************************************************************************/
    BITMAP* bitmapFondNoir;
    bitmapFondNoir = create_bitmap(SCREEN_W,SCREEN_H);

    clear_bitmap(bitmapFondNoir);

    /******************************************************************************/

    //Affichage boutons quitter 'oui' ou 'non'
    /******************************************************************************/
    BITMAP* boutonOui;
    boutonOui = load_bitmap("BoutonOui.bmp",NULL);

    if (!boutonOui)
    {
        allegro_message("Nous n'avons pas pu charger \"BoutonOui.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/
    BITMAP* boutonNon;
    boutonNon = load_bitmap("BoutonNon.bmp",NULL);

    if (!boutonNon)
    {
        allegro_message("Nous n'avons pas pu charger \"BoutonNon.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/

    //Affichage sur la bitmap choisie
      textout_centre_ex(bitmapFondNoir, font, "Es-tu sur de vouloir quitter notre superbe jeu ?", 510, 200, makecol(255, 255, 255), -1);
      draw_sprite(bitmapFondNoir, boutonOui, 415, 300);
      // draw_sprite(bitmapFondNoir, boutonNon, 600, 300);

    //On copie le double buffer dans screen
      blit(bitmapFondNoir,screen, 0, 0, 0, 0, 1024, 768);

    while (clic == 0){

        if (mouse_b & 1)   //Si clic gauche souris cliqué
            {
                //Si bouton 'Oui' cliqué -> quitte le jeu
                if(mouse_x>=400 && mouse_x<=639 && mouse_y>=305 && mouse_y<=515)
                {
                    //allegro_message("Dommage! A la prochaine");
                    quitterAllegro();
                }

            ///Annuler 'quitter la partie' ne marche pas
            /*
                //Si bouton 'Non' cliqué -> partie reprend
                if(mouse_x>=600 && mouse_x<=859 && mouse_y>=305 && mouse_y<=515)
                {
                    sleep(3);
                    clear_bitmap(screen);
                }
            }
            */
            }
    }
}
/*-----------------------------------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------------------------------*/
///Initialisation des joueurs au début de la partie
void initialiserJoueurStats(t_joueur *tabJoueurs, int nbJoueurs)   //Paramètres: tableau de joueurs, nb de joueurs, "i" pour le numéro du joueur
{
    int i=0, j=0;

    srand(time(NULL));

    for(i=0; i<nbJoueurs; i++)  //Boucle pour initialiser tous les joueurs
    {
        tabJoueurs[i].PV = 500;   //Initialisation des stats
        tabJoueurs[i].PM = 3;
        tabJoueurs[i].PA = 15;

        do{
        tabJoueurs[i].ligne = rand()% (11-0 +1) + 0;   //Placement aléatoire entre 1 et 1
        tabJoueurs[i].colonne = rand()% (15-0 +1) + 0;   //Placement aléatoire entre 1 et 16
        } while (obstacle(tabJoueurs[i].colonne, tabJoueurs[i].ligne)==1);

        tabJoueurs[i].cpt=0; //compteur pour PA
        tabJoueurs[i].vivant=1;//Savoir s'il est en vie ou pas
        tabJoueurs[i].classement=0;

        for(j=0;j<4;j++)
            tabJoueurs[i-1].choixClasseVerif[j] = 0;  //0 si le joueur a choisi une classe, 1 si classe choisie
    }
}
/*-----------------------------------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------------------------------*/
///Attribution de la classe en fonction des joueurs
void attributionClasseJoueur(t_joueur* tabJoueurs, int i)
{
    //Déclarations d'un double buffer pour stats de chaque joueur
    /******************************************************************************/
    BITMAP* fondCadreJoueur1;
    fondCadreJoueur1 = load_bitmap("fondCadreJoueur.bmp",NULL);

    if (!fondCadreJoueur1)
    {
        allegro_message("Nous n'avons pas pu charger \"fondCadreJoueur.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/
    BITMAP* fondCadreJoueur2;
    fondCadreJoueur2 = load_bitmap("fondCadreJoueur.bmp",NULL);

    if (!fondCadreJoueur2)
    {
        allegro_message("Nous n'avons pas pu charger \"fondCadreJoueur.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/
    BITMAP* fondCadreJoueur3;
    fondCadreJoueur3 = load_bitmap("fondCadreJoueur.bmp",NULL);

    if (!fondCadreJoueur3)
    {
        allegro_message("Nous n'avons pas pu charger \"fondCadreJoueur.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/
    BITMAP* fondCadreJoueur4;
    fondCadreJoueur4 = load_bitmap("fondCadreJoueur.bmp",NULL);

    if (!fondCadreJoueur4)
    {
        allegro_message("Nous n'avons pas pu charger \"fondCadreJoueur.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/

    //Switch case pour savoir à quel joueur de jouer
        switch (i){
            //Joueur 1
            case 0:
                textprintf_ex(fondCadreJoueur1, font, 300, 5, makecol(255,255,255), -1,  "             |        STATS       |");
                textprintf_ex(fondCadreJoueur1, font, 300, 25, makecol(255,255,255), -1, "             | Nombre PV = %d    |", tabJoueurs[i].PV);
                textprintf_ex(fondCadreJoueur1, font, 300, 45, makecol(255,255,255), -1, "             | Nombre PA = %d     |", tabJoueurs[i].PA);
                textprintf_ex(fondCadreJoueur1, font, 300, 65, makecol(255,255,255), -1, "             | Nombre PM = %d      |", tabJoueurs[i].PM);
                textprintf_ex(fondCadreJoueur1, font, 150, 35, makecol(255,255,255), -1,  "Joueur 1:");
                textprintf_ex(fondCadreJoueur1, font, 240, 35, makecol(255,128,192), -1, "%s",tabJoueurs[i].pseudo);
                textprintf_ex(fondCadreJoueur1, font, 700, 35, makecol(255,255,255), -1,  "---> %s",tabJoueurs[i].choixClasse);

                blit(fondCadreJoueur1,screen, 0, 0, 30, 650, 1024, 768);  //Affichage stats Joueur 1

                break;

            //Joueur 2
            case 1:
                textprintf_ex(fondCadreJoueur2, font, 300, 5, makecol(255,255,255), -1,  "             |        STATS       |");
                textprintf_ex(fondCadreJoueur2, font, 300, 25, makecol(255,255,255), -1, "             | Nombre PV = %d    |", tabJoueurs[i].PV);
                textprintf_ex(fondCadreJoueur2, font, 300, 45, makecol(255,255,255), -1, "             | Nombre PA = %d     |", tabJoueurs[i].PA);
                textprintf_ex(fondCadreJoueur2, font, 300, 65, makecol(255,255,255), -1, "             | Nombre PM = %d      |", tabJoueurs[i].PM);
                textprintf_ex(fondCadreJoueur2, font, 150, 35, makecol(255,255,255), -1,  "Joueur 2:");
                textprintf_ex(fondCadreJoueur2, font, 240, 35, makecol(255,128,192), -1, "%s",tabJoueurs[i].pseudo);
                textprintf_ex(fondCadreJoueur2, font, 700, 35, makecol(255,255,255), -1,  "---> %s",tabJoueurs[i].choixClasse);

                blit(fondCadreJoueur2,screen, 0, 0, 30, 650, 1024, 768);  //Affichage stats Joueur 2

                break;

            //Joueur 3
            case 2:
                textprintf_ex(fondCadreJoueur3, font, 300, 5, makecol(255,255,255), -1,  "             |        STATS       |");
                textprintf_ex(fondCadreJoueur3, font, 300, 25, makecol(255,255,255), -1, "             | Nombre PV = %d    |", tabJoueurs[i].PV);
                textprintf_ex(fondCadreJoueur3, font, 300, 45, makecol(255,255,255), -1, "             | Nombre PA = %d     |", tabJoueurs[i].PA);
                textprintf_ex(fondCadreJoueur3, font, 300, 65, makecol(255,255,255), -1, "             | Nombre PM = %d      |", tabJoueurs[i].PM);
                textprintf_ex(fondCadreJoueur3, font, 150, 35, makecol(255,255,255), -1,  "Joueur 3:");
                textprintf_ex(fondCadreJoueur3, font, 240, 35, makecol(255,128,192), -1, "%s",tabJoueurs[i].pseudo);
                textprintf_ex(fondCadreJoueur3, font, 700, 35, makecol(255,255,255), -1,  "---> %s",tabJoueurs[i].choixClasse);

                blit(fondCadreJoueur3,screen, 0, 0, 30, 650, 1024, 768);  //Affichage stats Joueur 3

                break;

            //Joueur 4
            case 3:
                textprintf_ex(fondCadreJoueur4, font, 300, 5, makecol(255,255,255), -1,  "             |        STATS       |");
                textprintf_ex(fondCadreJoueur4, font, 300, 25, makecol(255,255,255), -1, "             | Nombre PV = %d    |", tabJoueurs[i].PV);
                textprintf_ex(fondCadreJoueur4, font, 300, 45, makecol(255,255,255), -1, "             | Nombre PA = %d     |", tabJoueurs[i].PA);
                textprintf_ex(fondCadreJoueur4, font, 300, 65, makecol(255,255,255), -1, "             | Nombre PM = %d      |", tabJoueurs[i].PM);
                textprintf_ex(fondCadreJoueur4, font, 150, 35, makecol(255,255,255), -1,  "Joueur 4:");
                textprintf_ex(fondCadreJoueur4, font, 240, 35, makecol(255,128,192), -1, "%s",tabJoueurs[i].pseudo);
                textprintf_ex(fondCadreJoueur4, font, 700, 35, makecol(255,255,255), -1,  "---> %s",tabJoueurs[i].choixClasse);

                blit(fondCadreJoueur4,screen, 0, 0, 30, 650, 1024, 768);  //Affichage stats Joueur 4

                break;

            //Par défaut
            default:
                allegro_message("Erreur nbJoueurs faux !");
                break;
            }
}
/*-----------------------------------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------------------------------*/
///Choix de la classe(personnage) des joueurs
void choixClasseJoueur(t_joueur *tabJoueurs, int nbJoueurs)
{
    int i=0;
    int clic=0;

    //Création double buffer (arriere-plan)
    /******************************************************************************/
    BITMAP* arrierePlanChoix;
    arrierePlanChoix = load_bitmap("arrierePlanChoix.bmp",NULL);

    if (!arrierePlanChoix)
    {
        allegro_message("Nous n'avons pas pu charger \"arrierePlanChoix.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/

    //Création double buffer (tour du joueur)
    /******************************************************************************/
    BITMAP* fondCadreJoueur;
    fondCadreJoueur = load_bitmap("fondCadreJoueur.bmp",NULL);

    if (!fondCadreJoueur)
    {
        allegro_message("Nous n'avons pas pu charger \"fondCadreJoueur.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/

    //Création chargement
    /******************************************************************************/
    BITMAP* imageChargement;
    imageChargement = load_bitmap("imageChargement.bmp",NULL);

    if (!imageChargement)
    {
        allegro_message("Nous n'avons pas pu charger \"imageChargement.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/


    //Création cadre
    /******************************************************************************/
    BITMAP* cadreJoueur;
    cadreJoueur = load_bitmap("cadreJoueur.bmp",NULL);

    if (!cadreJoueur)
    {
        allegro_message("Nous n'avons pas pu charger \"cadreJoueur.bmp\"");
        quitterAllegro();
    }

    draw_sprite(arrierePlanChoix, cadreJoueur, 25, 640); //Affichage cadre
    /******************************************************************************/


    //Logo classes
    /******************************************************/
    //Classe feu
    BITMAP* logoFeu;
    logoFeu = load_bitmap("logoFeu.bmp",NULL);

    if (!logoFeu)
    {
        allegro_message("Nous n'avons pas pu charger \"logoFeu.bmp\"");
        quitterAllegro();
    }

    draw_sprite(arrierePlanChoix, logoFeu, 189, 92);
    /******************************************************/
    //Classe électricité
    BITMAP* logoElec;
    logoElec = load_bitmap("logoElec.bmp",NULL);

    if (!logoElec)
    {
        allegro_message("Nous n'avons pas pu charger \"logoElec.bmp\"");
        quitterAllegro();
    }

    draw_sprite(arrierePlanChoix, logoElec,440 ,92);
    /******************************************************/
    //Classe Plante
    BITMAP* logoPlante;
    logoPlante = load_bitmap("logoPlante.bmp",NULL);

    if (!logoPlante)
    {
        allegro_message("Nous n'avons pas pu charger \"logoPlante.bmp\"");
        quitterAllegro();
    }

    draw_sprite(arrierePlanChoix, logoPlante, 682, 92);
    /******************************************************/
    //Classe eau
    BITMAP* logoEau;
    logoEau= load_bitmap("logoEau.bmp",NULL);

    if (!logoEau)
    {
        allegro_message("Nous n'avons pas pu charger \"logoEau.bmp\"");
        quitterAllegro();
    }

    draw_sprite(arrierePlanChoix, logoEau, 940, 92);
    /******************************************************/


    //Carte Classes
    /******************************************************/
    //Classe feu
    BITMAP* carteFeu;
    carteFeu= load_bitmap("carteFeu.bmp",NULL);

    if (!carteFeu)
    {
        allegro_message("Nous n'avons pas pu charger \"carteFeu.bmp\"");
        quitterAllegro();
    }

    draw_sprite(arrierePlanChoix, carteFeu, 83, 398);
    /******************************************************/
    //Classe Electrique
    BITMAP* carteElec;
    carteElec= load_bitmap("carteElec.bmp",NULL);

    if (!carteElec)
    {
        allegro_message("Nous n'avons pas pu charger \"carteElec.bmp\"");
        quitterAllegro();
    }

    draw_sprite(arrierePlanChoix, carteElec, 332, 398);
    /******************************************************/
    //Classe plante
    BITMAP* cartePlante;
    cartePlante= load_bitmap("cartePlante.bmp",NULL);

    if (!cartePlante)
    {
        allegro_message("Nous n'avons pas pu charger \"cartePlante.bmp\"");
        quitterAllegro();
    }

    draw_sprite(arrierePlanChoix, cartePlante, 582, 398);
    /******************************************************/
    //Classe eau
    BITMAP* carteEau;
    carteEau= load_bitmap("carteEau.bmp",NULL);

    if (!carteEau)
    {
        allegro_message("Nous n'avons pas pu charger \"carteEau.bmp\"");
        quitterAllegro();
    }

    draw_sprite(arrierePlanChoix, carteEau, 836, 398);
    /******************************************************/
    //Classe dos
    BITMAP* carteDos;
    carteDos= load_bitmap("carteDos.bmp",NULL);

    if (!carteDos)
    {
        allegro_message("Nous n'avons pas pu charger \"carteDos.bmp\"");
        quitterAllegro();
    }
    /******************************************************/



    //Création Dresseurs
    /******************************************************/
    //Dresseur 1
    BITMAP* Dresseur1;
    Dresseur1 = load_bitmap("Dresseur1.bmp",NULL);

    if (!Dresseur1)
    {
        allegro_message("Nous n'avons pas pu charger \"Dresseur1.bmp\"");
        quitterAllegro();
    }

    //Affichage
    draw_sprite(arrierePlanChoix, Dresseur1, 80, 140);
    textprintf_ex(arrierePlanChoix, font, 80, 125, makecol(190,0,0), -1, "Sacha");
    /******************************************************/
    //Dresseur 2
    BITMAP* Dresseur2;
    Dresseur2 = load_bitmap("Dresseur2.bmp",NULL);

    if (!Dresseur2)
    {
        allegro_message("Nous n'avons pas pu charger \"Dresseur2.bmp\"");
        quitterAllegro();
    }

    //Affichage
    draw_sprite(arrierePlanChoix, Dresseur2, 330, 140);
    textprintf_ex(arrierePlanChoix, font, 330, 125, makecol(244,223,0), -1, "Clem");
    /******************************************************/
    //Dresseur 3
    BITMAP* Dresseur3;
    Dresseur3 = load_bitmap("Dresseur3.bmp",NULL);

    if (!Dresseur3)
    {
        allegro_message("Nous n'avons pas pu charger \"Dresseur3.bmp\"");
        quitterAllegro();
    }

    //Affichage
    draw_sprite(arrierePlanChoix, Dresseur3, 580, 140);
    textprintf_ex(arrierePlanChoix, font, 580, 125, makecol(0,194,21), -1, "Pierre");
    /******************************************************/
    //Dresseur 4
    BITMAP* Dresseur4;
    Dresseur4 = load_bitmap("Dresseur4.bmp",NULL);

    if (!Dresseur4)
    {
        allegro_message("Nous n'avons pas pu charger \"Dresseur4.bmp\"");
        quitterAllegro();
    }

    //Affichage
    draw_sprite(arrierePlanChoix, Dresseur4, 830, 140);
    textprintf_ex(arrierePlanChoix, font, 830, 125, makecol(0,78,202), -1, "Flora");
    /******************************************************/

    //Affichages
    textprintf_ex(arrierePlanChoix, font, 450, 50, makecol(202,112,0),-1, "Choix du dresseur:");
    textprintf_ex(arrierePlanChoix, font, 20, 80, makecol(128,0,128), -1, "Nombre joueurs: %d", nbJoueurs);
    rect(arrierePlanChoix, 445,46,600,61, makecol(202,112,0));
    line(arrierePlanChoix,23,93,149,93, makecol(128,0,128));

    //On affiche tout sur le screen
    blit(arrierePlanChoix,screen, 0, 0, 0, 0, 1024, 768);
    affichageBoutonExit();  //On affiche le bouton exit

    sleep(1); //Pause de 2sec

    clear(fondCadreJoueur);

    //Boucle des choix de classe
    while(i < nbJoueurs)
    {
        textprintf_ex(fondCadreJoueur, font, 360, 30, makecol(255,255,255), -1, "Choisissez votre dresseur !");  //On affiche à chaque tour
        clear(fondCadreJoueur);
        textprintf_ex(fondCadreJoueur, font, 360, 30, makecol(255,255,255), -1, "Choisissez votre dresseur !");  //On affiche à chaque tour
        blit(fondCadreJoueur,screen, 0, 0, 30, 650, 1024, 768);  //Double buffer sur le cadre

        while(clic == 0)  //Boucle pour pouvoir choisir en cliquant sur les 'cases' des dresseurs
        {
            //Choix du dresseur 1
            //Si clic gauche souris cliqué
            if (mouse_b & 1)
            {

                if(mouse_x>=83 && mouse_x<=235 && mouse_y>=142 && mouse_y<=362) //Si souris clique 'case' du dresseur
                {
                    tabJoueurs[i].choixClasseVerif[0] = 1;  //Le joueur "i" a choisi le dresseur 1 (donc plus disponible)

                    if (tabJoueurs[i-1].choixClasseVerif[0] == 0)   //Si dresseur non pris par un joueur
                    {
                        clic=1;

                        strcpy(tabJoueurs[i].pseudo,"Sacha");     //On affecte le nom du dresseur au joueur
                        strcpy(tabJoueurs[i].choixClasse,"Classe: FEU");

                        tabJoueurs[i].classe=1;

                        attributionClasseJoueur(tabJoueurs,i); //Appel sous fonction attribution

                        rectfill(screen, 80, 140, 235, 362, makecol(195,195,195));  //Colorise 'case' dresseur choisi
                        draw_sprite(screen, carteDos, 83, 398);
                    }
                }

                //Choix du dresseur 2
                if(mouse_x>=331 && mouse_x<=486 && mouse_y>=142 && mouse_y<=362)
                {
                    tabJoueurs[i].choixClasseVerif[1] = 1;

                    if (tabJoueurs[i-1].choixClasseVerif[1] == 0)   //Si souris clique 'case' du dresseur & dresseur non pris
                    {

                        clic=1;

                        strcpy(tabJoueurs[i].pseudo,"Clem");
                        strcpy(tabJoueurs[i].choixClasse,"Classe: ELECTRIQUE");

                        tabJoueurs[i].classe=3;

                        attributionClasseJoueur(tabJoueurs,i);

                        rectfill(screen, 330, 140, 486, 362, makecol(195,195,195));
                        draw_sprite(screen, carteDos, 332, 398);
                    }
                }

                //Choix du dresseur 3
                if(mouse_x>=581 && mouse_x<=731 && mouse_y>=142 && mouse_y<=362)
                {
                    tabJoueurs[i].choixClasseVerif[2] = 1;

                    if (tabJoueurs[i-1].choixClasseVerif[2] == 0)   //Si souris clique 'case' du dresseur & dresseur non pris
                    {
                        clic=1;

                        strcpy(tabJoueurs[i].pseudo,"Pierre");
                        strcpy(tabJoueurs[i].choixClasse,"Classe: PLANTE");

                        tabJoueurs[i].classe=4;

                        attributionClasseJoueur(tabJoueurs,i);

                        rectfill(screen, 580, 140, 730, 362, makecol(195,195,195));
                        draw_sprite(screen, carteDos, 582, 398);
                    }
                }

                //Choix du dresseur 4
                if(mouse_x>=831 && mouse_x<=987 && mouse_y>=142 && mouse_y<=362)
                {
                    tabJoueurs[i].choixClasseVerif[3] = 1;

                    if (tabJoueurs[i-1].choixClasseVerif[3] == 0)   //Si souris clique 'case' du dresseur & dresseur non pris
                    {

                        clic=1;

                        strcpy(tabJoueurs[i].pseudo,"Flora");
                        strcpy(tabJoueurs[i].choixClasse,"Classe: EAU");

                        tabJoueurs[i].classe=2;

                        attributionClasseJoueur(tabJoueurs,i);

                        rectfill(screen, 830, 140, 987, 362, makecol(195,195,195));
                        draw_sprite(screen, carteDos, 836, 398);
                    }
                }

                //Quitter le jeu
                if (mouse_x<=40 && mouse_y<=20)
                {
                    exitJeu();
                }

            }  //Fin boucle 'clic gauche'

        } //Fin boucle choix classe pour 1 tour

        i++; //On passe au tour suivant
        clic=0; // Condition réinitialisée pour re-rentrer dans la 2e boucle while

        sleep(2.2);

        /*------------------------------------------------*/   ///Passage au joueur suivant
        if (i == nbJoueurs)
            allegro_message("Lancer la partie");
        else
            allegro_message("--> Passer au 'Joueur %d'", i+1);
        /*------------------------------------------------*/

    }//Fin boucle while (choix des classes jusqu'à NbJoueurs)

    clear_bitmap(screen);
    blit(imageChargement,screen, 0, 0, 0, 0, 1024, 768);
    sleep(3);
}
/*-----------------------------------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------------------------------*/
///Choix du nb de joueurs (avec affichage des boutons)
int choixNbJoueurs(t_joueur *tabJoueurs)
{
    int clic=0;
    int nbJoueurs;

    //Création double buffer
    /******************************************************************************/     //Création / chargement bitmaps
    BITMAP* arrierePlanMenu;
    arrierePlanMenu = load_bitmap("choixJoueurs.bmp",NULL);

    if (!arrierePlanMenu)
    {
        allegro_message("Nous n'avons pas pu charger \"choixJoueurs.bmp\"");
        quitterAllegro();
    }

    //Création boutons choix du nb de joueurs
    /******************************************************************************/
    BITMAP* bouton2p;
    bouton2p = load_bitmap("Bouton 2p.bmp",NULL);

    if (!bouton2p)
    {
        allegro_message("Nous n'avons pas pu charger \"Bouton 2p.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/
    BITMAP* bouton3p;
    bouton3p = load_bitmap("Bouton 3p.bmp",NULL);

    if (!bouton3p)
    {
        allegro_message("Nous n'avons pas pu charger \"Bouton 3p.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/
    BITMAP* bouton4p;
    bouton4p = load_bitmap("Bouton 4p.bmp",NULL);

    if (!bouton4p)
    {
        allegro_message("Nous n'avons pas pu charger \"Bouton 4p.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/

    //Affichages sur le buffer
    textout_centre_ex(arrierePlanMenu, font, "Combien de joueurs ?", 512, 280, makecol(128,0,128), -1);
    rect(arrierePlanMenu,421,273,603,291, makecol(255,0,0));
    draw_sprite(arrierePlanMenu, bouton2p, 106, 310);   //Affichage des 3 boutons pour le nombres de joueurs
    draw_sprite(arrierePlanMenu, bouton3p, 412, 310);
    draw_sprite(arrierePlanMenu, bouton4p, 718, 310);

    //On copie le buffer sur le screen
    blit(arrierePlanMenu,screen, 0, 0, 0, 0, 1024, 768);
    affichageBoutonExit();

    sleep(1);  //Pause de 1s

    while (clic == 0){
        ////Si clic gauche souris cliqué
        if (mouse_b & 1)
        {
            //Si bouton '2 joueurs' cliqué -> initialisation pour 2 joueurs
            if(mouse_x>=106 && mouse_x<=306 && mouse_y>=310&& mouse_y<=387)
            {
                clic=1;
                initialiserJoueurStats(tabJoueurs,2); // initialisation stats de 2 joueurs
                nbJoueurs=2;
                clear_bitmap(screen);
                return nbJoueurs;
            }

            //Si bouton '3 joueurs' cliqué -> initialisation pour 3 joueurs
            if(mouse_x>=412 && mouse_x<=612 && mouse_y>=310&& mouse_y<=387)
            {
                clic=1;
                initialiserJoueurStats(tabJoueurs,3); // initialisation stats de 3 joueurs
                nbJoueurs=3;
                clear_bitmap(screen);
                return nbJoueurs;
            }

            //Si bouton '4 joueurs' cliqué -> initialisation pour 4 joueurs
            if(mouse_x>=718 && mouse_x<=918 && mouse_y>=310&& mouse_y<=387)
            {
                clic=1;
                initialiserJoueurStats(tabJoueurs,4); // initialisation stats de 4 joueurs
                nbJoueurs=4;
                clear_bitmap(screen);
                return nbJoueurs;
            }

            ////Si bouton 'exit' cliqué -> quitte le jeu
            if (mouse_x<=40 && mouse_y<=20)
            {
                exitJeu();
            }
        }
    }
}
/*-----------------------------------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------------------------------*/
///Lancement du jeu (chargement, choix des joueurs,...)
void menuDemarrage(t_joueur *tabJoueurs, int* nbJoueurs)
{
    int clic = 0;
    show_mouse(screen);   //Affichage curseur souris

    /******************************************************************************/   //Création / chargement bitmaps
    BITMAP* imageMenu1;
    imageMenu1 = load_bitmap("Image menu chargement 1.bmp",NULL);

    if (!imageMenu1)
    {
        allegro_message("Nous n'avons pas pu charger \"Image menu chargement 1.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/
    BITMAP* imageMenu2;
    imageMenu2 = load_bitmap("Image menu chargement 2.bmp",NULL);

    if (!imageMenu2)
    {
        allegro_message("Nous n'avons pas pu charger \"Image menu chargement 2.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/
    BITMAP* imageMenu3;
    imageMenu3 = load_bitmap("Image menu chargement 3.bmp",NULL);

    if (!imageMenu3)
    {
        allegro_message("Nous n'avons pas pu charger \"Image menu chargement 3.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/
    BITMAP* imageMenu4;
    imageMenu4 = load_bitmap("Image menu chargement 4.bmp",NULL);

    if (!imageMenu4)
    {
        allegro_message("Nous n'avons pas pu charger \"Image menu chargement 4.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/
    BITMAP* imageMenu5;
    imageMenu5 = load_bitmap("Image menu chargement 5.bmp",NULL);

    if (!imageMenu5)
    {
        allegro_message("Nous n'avons pas pu charger \"Image menu chargement 5.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/
    BITMAP* imageMenu6;
    imageMenu6 = load_bitmap("Image menu chargement 6.bmp",NULL);

    if (!imageMenu6)
    {
        allegro_message("Nous n'avons pas pu charger \"Image menu chargement 6.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/
    BITMAP* imageMenu7;
    imageMenu7 = load_bitmap("Image menu chargement 7.bmp",NULL);

    if (!imageMenu7)
    {
        allegro_message("Nous n'avons pas pu charger \"Image menu chargement 7.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/
    BITMAP* boutonStart;
    boutonStart = load_bitmap("Bouton start.bmp",NULL);

    if (!boutonStart)
    {
        allegro_message("Nous n'avons pas pu charger \"Bouton start.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/
    BITMAP* menuStart;
    menuStart = load_bitmap("menuStart.bmp",NULL);

    if (!menuStart)
    {
        allegro_message("Nous n'avons pas pu charger \"menuStart.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/


    //******************************************************************************//
    //Affichage bitmaps
    blit(imageMenu1,screen, 0, 0, 0, 0, 1024, 768);
    textout_centre_ex(screen, font, "Chargement", 512, 384, makecol(0, 0, 0), -1);
    sleep(1);  //Pause de 1s

    clear_bitmap(screen);
    blit(imageMenu2,screen, 0, 0, 0, 0, 1024, 768);
    textout_centre_ex(screen, font, "Chargement.", 512, 384, makecol(0, 0, 0), -1);
    sleep(1);

    clear_bitmap(screen);
    blit(imageMenu3,screen, 0, 0, 0, 0, 1024, 768);
    textout_centre_ex(screen, font, "Chargement..", 512, 384, makecol(0, 0, 0), -1);
    sleep(1);

    clear_bitmap(screen);
    blit(imageMenu4,screen, 0, 0, 0, 0, 1024, 768);
    textout_centre_ex(screen, font, "Chargement...", 512, 384, makecol(0, 0, 0), -1);
    sleep(1);

    clear_bitmap(screen);
    blit(imageMenu5,screen, 0, 0, 0, 0, 1024, 768);
    textout_centre_ex(screen, font, "Chargement.", 512, 384, makecol(0, 0, 0), -1);
    sleep(1);

    clear_bitmap(screen);
    blit(imageMenu6,screen, 0, 0, 0, 0, 1024, 768);
    textout_centre_ex(screen, font, "Chargement..", 512, 384, makecol(0, 0, 0), -1);
    sleep(1);

    clear_bitmap(screen);
    blit(imageMenu7,screen, 0, 0, 0, 0, 1024, 768);
    textout_centre_ex(screen, font, "Chargement...", 512, 384, makecol(0, 0, 0), -1);
    sleep(1);

    clear_bitmap(screen);
    blit(menuStart,screen, 0, 0, 0, 0, 1024, 768);
    textout_centre_ex(screen, font, "Appuyez sur 'Start' pour commencer.", 512, 400, makecol(255, 255, 255), -1);
    draw_sprite(screen, boutonStart, 415, 434);
    //******************************************************************************//

   //Utilisation de la souris sur les boutons (boucle)
    while (clic == 0){
        //Si clic gauche souris cliqué
        if (mouse_b & 1)
        {
            //Si bouton 'start' cliqué -> lancement choix des joueurs
            if(mouse_x>=415 && mouse_x<=585 && mouse_y>=434 && mouse_y<=532)
            {
                clic=1;
                //Suppresion des anciennes bitmaps sauf la 7 qui reste pour le fond d'écran
                destroy_bitmap(imageMenu1);
                destroy_bitmap(imageMenu2);
                destroy_bitmap(imageMenu3);
                destroy_bitmap(imageMenu4);
                destroy_bitmap(imageMenu5);
                destroy_bitmap(imageMenu6);
                destroy_bitmap(imageMenu7);
                destroy_bitmap(boutonStart);

                clear_bitmap(screen);
            }
        }
    }
}
/*-----------------------------------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------------------------------*/
BITMAP* recup_sprites( BITMAP*scr, int w, int h, int startx, int starty, int col, int element)
{
BITMAP *bmp;
int x,y;

bmp=create_bitmap(w,h);

    if (!bmp)
    {
        allegro_message("Nous n'avons pas pu charger votre sprite");
        quitterAllegro();
    }

if (bmp!=NULL){
x= startx+(element%col)*w;
y= starty+(element/col)*h;
blit(scr,bmp,x,y,0,0,w,h);
}
return bmp;
}
/*-----------------------------------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------------------------------*/
void extractionSprite (BITMAP* spriteDresseur[4][16],BITMAP* spritePokemon[4], BITMAP* spritePokeAttack[4][4]){
int i, j;


BITMAP* groupe_animes[4];
BITMAP*groupe_pokemonAttaque[4];



groupe_animes[0]=load_bitmap("Joueur1.bmp",NULL);
    if (!groupe_animes[0])
    {
        allegro_message("Nous n'avons pas pu charger  Joueur1.bmp ");
        quitterAllegro();
    }
groupe_animes[1]=load_bitmap("Joueur2.bmp",NULL);
    if (!groupe_animes[1])
    {
        allegro_message("Nous n'avons pas pu charger  Joueur2.bmp ");
        quitterAllegro();
    }
groupe_animes[2]=load_bitmap("Joueur3.bmp",NULL);
    if (!groupe_animes[2])
    {
        allegro_message("Nous n'avons pas pu charger  Joueur3.bmp ");
        quitterAllegro();
    }
groupe_animes[3]=load_bitmap("Joueur4.bmp",NULL);
    if (!groupe_animes[3])
    {
        allegro_message("Nous n'avons pas pu charger  Joueur4.bmp ");
        quitterAllegro();
    }


for (i=0;i<4;i++){
    for (j=0;j<16;j++){
spriteDresseur[i][j] = recup_sprites(groupe_animes[i],50,64,0,0,4,j);

}
}



groupe_pokemonAttaque[0]=load_bitmap("pokefeu - Copie.bmp",NULL);
    if (!groupe_pokemonAttaque[0])
    {
        allegro_message("Nous n'avons pas pu charger pokefeu - Copie.bmp ");
        quitterAllegro();
    }
groupe_pokemonAttaque[1]=load_bitmap("pokeeau - Copie.bmp",NULL);
    if (!groupe_pokemonAttaque[1])
    {
        allegro_message("Nous n'avons pas pu charger  pokeeau - Copie.bmp ");
        quitterAllegro();
    }
groupe_pokemonAttaque[2]=load_bitmap("pokeelec - Copie.bmp",NULL);
    if (!groupe_pokemonAttaque[2])
    {
        allegro_message("Nous n'avons pas pu charger  pokeelec - Copie.bmp ");
        quitterAllegro();
    }
groupe_pokemonAttaque[3]=load_bitmap("pokeplante - Copie.bmp",NULL);
    if (!groupe_pokemonAttaque[3])
    {
        allegro_message("Nous n'avons pas pu charger  pokeplante - Copie.bmp ");
        quitterAllegro();
    }


for (i=0;i<4;i++){
    for (j=0;j<4;j++){
spritePokeAttack[i][j] = recup_sprites(groupe_pokemonAttaque[i],58,78,0,0,4,j);

}
}




spritePokemon[0]=load_bitmap("pokefeu.bmp",NULL);
    if (!spritePokemon[0])
    {
        allegro_message("Nous n'avons pas pu charger  pokefeu.bmp");
        quitterAllegro();
    }
spritePokemon[1]=load_bitmap("pokeeau.bmp",NULL);
    if (!spritePokemon[1])
    {
        allegro_message("Nous n'avons pas pu charger  pokefeu.bmp");
        quitterAllegro();
    }
spritePokemon[2]=load_bitmap("pokeelec.bmp",NULL);
    if (!spritePokemon[2])
    {
        allegro_message("Nous n'avons pas pu charger pokeelec.bmp");
        quitterAllegro();
    }
spritePokemon[3]=load_bitmap("pokeplante.bmp",NULL);
    if (!spritePokemon[3])
    {
        allegro_message("Nous n'avons pas pu charger pokeplante.bmp");
        quitterAllegro();
    }







destroy_bitmap(groupe_animes[0]);
destroy_bitmap(groupe_animes[1]);
destroy_bitmap(groupe_animes[2]);
destroy_bitmap(groupe_animes[3]);


destroy_bitmap(groupe_pokemonAttaque[0]);
destroy_bitmap(groupe_pokemonAttaque[1]);
destroy_bitmap(groupe_pokemonAttaque[2]);
destroy_bitmap(groupe_pokemonAttaque[3]);


}
/*-----------------------------------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------------------------------*/
int obstacle (int Scolonne, int Sligne){ // spg de hitbox

//hitbox du lac
if ((Scolonne>=0&&Scolonne<=15)&&(Sligne==10||Sligne==11)){
    return 1;
}
//hitbaox maison
if ((Scolonne>=10&&Scolonne<=13)&&(Sligne>=0&&Sligne<=3)){
    return 1;
}

//hitbaox arbres
if ((Scolonne>=13&&Scolonne<=15)&&(Sligne>=8&&Sligne<=9)){
    return 1;
}


//hitbaox flac
if ((Scolonne==2)&&(Sligne>=7&&Sligne<=8)){
    return 1;
}
//hitbaox fleur
else if (((Scolonne>=6&&Scolonne<=11)&&(Sligne>=6&&Sligne<=8))||((Scolonne>=10&&Scolonne<=11)&&(Sligne==9))){
    return 1;
}

//hitbaox panneau 1
else if ((Scolonne==4)&&(Sligne>=1&&Sligne<=2)){
    return 1;
}

//hitbaox panneau 2
else if ((Scolonne==1)&&(Sligne==3)){
    return 1;
}

else

return 0;
}
/*-----------------------------------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------------------------------*/
int deplace (BITMAP* decor, BITMAP* page,BITMAP* spriteDresseur[4][16], t_joueur *mesJoueur, int numJoueur, int nbJoueur)
{

    int Scolonne; // position de la case du personnage en x
    int Sligne; // position de la case du personnage en y

/*
    t_joueur* mesJoueur;
    mesJoueur[numJoueur].PM=500;
    mesJoueur[numJoueur].ligne=2;
    mesJoueur[numJoueur].colonne=2;
*/
    decor= load_bitmap("mapJeu.bmp", NULL );

    if (!decor)
    {
        allegro_message("Nous n'avons pas pu charger  mapJeu.bmp ");
        quitterAllegro();
    }

    int newLigne;
    int newColonne;

    int i, j, k;
    int clic=0;

    while (clic == 0)
    {
        blit(decor, page, 0, 0, 0, 0, decor->w,decor->h);


        //position de la souris
        Scolonne=mouse_x/64; // chaque case de la grille a des coté de 32 pixedls
        Sligne=mouse_y/64;

        if (mesJoueur[numJoueur].PM<=0){
            textprintf_ex(page, font, 100, 20, makecol(255, 255, 0), -1, "nombre de PM : %d", mesJoueur[numJoueur].PM); //si le joueur n'a pas de point de mouvement, il ne peut pas se déplacer
            return 1;
        }

        int deplacement;
        int deplacementABS;
        int deplacementORD;


       for (i=0; i<nbJoueur; i++){

        draw_sprite(page, spriteDresseur[i][0], mesJoueur[i].colonne*64, mesJoueur[i].ligne*64);
       }

affichageStats(page, mesJoueur, nbJoueur, numJoueur);


        if (mouse_b&1)
        {
             newLigne=Sligne;
             newColonne=Scolonne;



            deplacementABS=mesJoueur[numJoueur].colonne-Scolonne;
            deplacementORD=mesJoueur[numJoueur].ligne-Sligne;


            if (deplacementABS<0){
                deplacementABS=-deplacementABS;
            }
            if (deplacementORD<0){
                deplacementORD=-deplacementORD;
            }

            deplacement= deplacementABS+deplacementORD;


if ((deplacement<=3)&&(obstacle(newColonne,newLigne)!=1)){ //le joueur rentre les conditions pour se déplacer



            mesJoueur[numJoueur].PM=mesJoueur[numJoueur].PM-deplacement; //on enleve le nombre de pm correspondant au joueur

            ///deplacement animé////
            //deplacement abcisse
            //for (i=(mesJoueur[numJoueur].colonne*64); i<newColonne*64; i++){

            if ((mesJoueur[numJoueur].colonne-newColonne)<0){
                for (i=(mesJoueur[numJoueur].colonne*64); i<newColonne*64; i++){
                //marcher à droite
                    for (j=8; j<12; j++){ //sprite correspondant a marcher a droite
                        clear_bitmap(page);
                        blit(decor, page, 0, 0, 0, 0, decor->w,decor->h);
                         textprintf_ex(page, font, 100, 20, makecol(255, 255, 0), -1, "Nombre de deplacement : %d", deplacement);
                        draw_sprite(page, spriteDresseur[numJoueur][j], i, mesJoueur[numJoueur].ligne*64);

                               for (k=0; k<nbJoueur; k++){
                                    if (k!=numJoueur){

                                    draw_sprite(page, spriteDresseur[k][0], mesJoueur[k].colonne*64, mesJoueur[k].ligne*64);
                            }
                               }



                        blit(page, screen, 0, 0, 0, 0, decor->w,decor->h);

                        if (j>=12){
                            j=8;
                        }
                    }
                }
            }

            else if ((mesJoueur[numJoueur].colonne-newColonne)>0){
                for (i=mesJoueur[numJoueur].colonne*64; i>newColonne*64; i--){
                    //marcher à gauche
                    for (j=4; j<8; j++){
                        clear_bitmap(page);
                        blit(decor, page, 0, 0, 0, 0, decor->w,decor->h);
                         textprintf_ex(page, font, 100, 20, makecol(255, 255, 0), -1, "Nombre de deplacement : %d", deplacement);
                        draw_sprite(page, spriteDresseur[numJoueur][j], i, mesJoueur[numJoueur].ligne*64);

                        for (k=0; k<nbJoueur; k++){
                                    if (k!=numJoueur){

                                    draw_sprite(page, spriteDresseur[k][0], mesJoueur[k].colonne*64, mesJoueur[k].ligne*64);
                            }
                               }
                        blit(page, screen, 0, 0, 0, 0, decor->w,decor->h);

                        if (j>=8){
                            j=4;
                        }
                    }
                }
            }

            //deplacement ordonné

            //for (i=(mesJoueur[numJoueur].ligne*64); i<newLigne*64; i++){


            if ((mesJoueur[numJoueur].ligne -newLigne)<0){
                for (i=(mesJoueur[numJoueur].ligne*64); i<newLigne*64; i++){
                    //marcher en bas
                    for (j=0; j<4; j++){ //sprite correspondant a marcher a droite

                        clear_bitmap(page);
                        blit(decor, page, 0, 0, 0, 0, decor->w,decor->h);
                         textprintf_ex(page, font, 100, 20, makecol(255, 255, 0), -1, "Nombre de deplacement : %d", deplacement);
                        draw_sprite(page, spriteDresseur[numJoueur][j],newColonne*64, i);
                        for (k=0; k<nbJoueur; k++){
                                    if (k!=numJoueur){

                                    draw_sprite(page, spriteDresseur[k][0], mesJoueur[k].colonne*64, mesJoueur[k].ligne*64);
                            }
                               }
                        blit(page, screen, 0, 0, 0, 0, decor->w,decor->h);

                        if (j>=4){
                            j=0;
                        }
                    }
                }
            }

            else if ((mesJoueur[numJoueur].ligne-newLigne)>0){
                for (i=(mesJoueur[numJoueur].ligne*64 ); i>newLigne*64; i--){
                    //marcher en haut
                    for (j=12; j<16; j++){
                        clear_bitmap(page);
                        blit(decor, page, 0, 0, 0, 0, decor->w,decor->h);
                         textprintf_ex(page, font, 100, 20, makecol(255, 255, 0), -1, "Nombre de deplacement : %d", deplacement);
                        draw_sprite(page, spriteDresseur[numJoueur][j], newColonne*64, i);
                        for (k=0; k<nbJoueur; k++){
                                    if (k!=numJoueur){

                                    draw_sprite(page, spriteDresseur[k][0], mesJoueur[k].colonne*64, mesJoueur[k].ligne*64);
                            }
                               }
                        blit(page, screen, 0, 0, 0, 0, decor->w,decor->h);
                        if (j>=16){
                            j=12;
                        }
                    }
                }
            }
            clear_bitmap(page);
            blit(decor, page, 0, 0, 0, 0, decor->w,decor->h);

            mesJoueur[numJoueur].ligne=newLigne;
            mesJoueur[numJoueur].colonne=newColonne;
            mesJoueur[numJoueur].PM=3;

            draw_sprite(page, spriteDresseur[numJoueur][1],mesJoueur[numJoueur].colonne*64, mesJoueur[numJoueur].ligne*64);
             textprintf_ex(page, font, 100, 20, makecol(255, 255, 0), -1, "Nombre de deplacement : %d", deplacement);
            clic=1;
            }

           else {
            return 2; // le joueur a touché un obstacle ou n'a pas assez de PM pour le déplacement
           }

        }

    blit(page, screen, 0, 0, 0, 0, decor->w,decor->h);

    }

return 0;

}
/*-----------------------------------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------------------------------*/
void affichageStats(BITMAP* page, t_joueur* tabJoueurs, int nbJoueurs, int numJoueur){

    if(nbJoueurs==2)
    {
        if(numJoueur==0) //Si c'est au joueur 1 de jouer
        {

            textprintf_ex(page, font, 10, 715, makecol(255,128,192), -1, "%s",tabJoueurs[numJoueur].pseudo);
            textprintf_ex(page, font, 10, 727, makecol(255,255,255), -1, "%s",tabJoueurs[numJoueur].choixClasse);
            //textprintf_ex(page, font, 10, 735, makecol(255,255,255), -1, "LOGO CLASSE");
            textprintf_ex(page, font, 125, 715, makecol(255,255,255), -1, "|        STATS       |");
            textprintf_ex(page, font, 125, 737, makecol(255,255,255), -1, "| PV = %d    |", tabJoueurs[numJoueur].PV);
            textprintf_ex(page, font, 125, 747, makecol(255,255,255), -1, "| PA = %d     |", tabJoueurs[numJoueur].PA);
            textprintf_ex(page, font, 125, 757, makecol(255,255,255), -1, "| PM = %d      |", tabJoueurs[numJoueur].PM);
            //textprintf_ex(page, font, 350, 715, makecol(255,255,255), -1, "|POKEMON LA|");
        }
        else if(numJoueur==1) //Si c'est au joueur 2 de jouer
        {
            textprintf_ex(page, font, 10, 715, makecol(255,128,192), -1, "%s",tabJoueurs[numJoueur].pseudo);
            textprintf_ex(page, font, 10, 727, makecol(255,255,255), -1, "%s",tabJoueurs[numJoueur].choixClasse);
            //textprintf_ex(page, font, 10, 735, makecol(255,255,255), -1, "LOGO CLASSE");
            textprintf_ex(page, font, 125, 715, makecol(255,255,255), -1, "|        STATS       |");
            textprintf_ex(page, font, 125, 737, makecol(255,255,255), -1, "| PV = %d    |", tabJoueurs[numJoueur].PV);
            textprintf_ex(page, font, 125, 747, makecol(255,255,255), -1, "| PA = %d     |", tabJoueurs[numJoueur].PA);
            textprintf_ex(page, font, 125, 757, makecol(255,255,255), -1, "| PM = %d      |", tabJoueurs[numJoueur].PM);
            //textprintf_ex(page, font, 350, 715, makecol(255,255,255), -1, "|POKEMON LA|");
        }
    }
    else if(nbJoueurs==3){
        if(nbJoueurs == 0) //Si c'est au joueur 1 de jouer
        {
            textprintf_ex(page, font, 10, 715, makecol(255,128,192), -1, "%s",tabJoueurs[numJoueur].pseudo);
            textprintf_ex(page, font, 10, 727, makecol(255,255,255), -1, "%s",tabJoueurs[numJoueur].choixClasse);
            //textprintf_ex(page, font, 10, 735, makecol(255,255,255), -1, "LOGO CLASSE");
            textprintf_ex(page, font, 125, 715, makecol(255,255,255), -1, "|        STATS       |");
            textprintf_ex(page, font, 125, 737, makecol(255,255,255), -1, "| PV = %d    |", tabJoueurs[numJoueur].PV);
            textprintf_ex(page, font, 125, 747, makecol(255,255,255), -1, "| PA = %d     |", tabJoueurs[numJoueur].PA);
            textprintf_ex(page, font, 125, 757, makecol(255,255,255), -1, "| PM = %d      |", tabJoueurs[numJoueur].PM);
            //textprintf_ex(page, font, 350, 715, makecol(255,255,255), -1, "|POKEMON LA|");
        }
        else if(nbJoueurs==1) //Si c'est au joueur 2 de jouer
        {
            textprintf_ex(page, font, 10, 715, makecol(255,128,192), -1, "%s",tabJoueurs[numJoueur].pseudo);
            textprintf_ex(page, font, 10, 727, makecol(255,255,255), -1, "%s",tabJoueurs[numJoueur].choixClasse);
            //textprintf_ex(page, font, 10, 735, makecol(255,255,255), -1, "LOGO CLASSE");
            textprintf_ex(page, font, 125, 715, makecol(255,255,255), -1, "|        STATS       |");
            textprintf_ex(page, font, 125, 737, makecol(255,255,255), -1, "| PV = %d    |", tabJoueurs[numJoueur].PV);
            textprintf_ex(page, font, 125, 747, makecol(255,255,255), -1, "| PA = %d     |", tabJoueurs[numJoueur].PA);
            textprintf_ex(page, font, 125, 757, makecol(255,255,255), -1, "| PM = %d      |", tabJoueurs[numJoueur].PM);
            //textprintf_ex(page, font, 350, 715, makecol(255,255,255), -1, "|POKEMON LA|");
        }
        else if(nbJoueurs==2) //Si c'est au joueur 2 de jouer
        {
            textprintf_ex(page, font, 10, 715, makecol(255,128,192), -1, "%s",tabJoueurs[numJoueur].pseudo);
            textprintf_ex(page, font, 10, 727, makecol(255,255,255), -1, "%s",tabJoueurs[numJoueur].choixClasse);
            //textprintf_ex(page, font, 10, 735, makecol(255,255,255), -1, "LOGO CLASSE");
            textprintf_ex(page, font, 125, 715, makecol(255,255,255), -1, "|        STATS       |");
            textprintf_ex(page, font, 125, 737, makecol(255,255,255), -1, "| PV = %d    |", tabJoueurs[numJoueur].PV);
            textprintf_ex(page, font, 125, 747, makecol(255,255,255), -1, "| PA = %d     |", tabJoueurs[numJoueur].PA);
            textprintf_ex(page, font, 125, 757, makecol(255,255,255), -1, "| PM = %d      |", tabJoueurs[numJoueur].PM);
            //textprintf_ex(page, font, 350, 715, makecol(255,255,255), -1, "|POKEMON LA|");
        }
    }
    else if(nbJoueurs==4){
        if(nbJoueurs==0) //Si c'est au joueur 1 de jouer
        {
            textprintf_ex(page, font, 10, 715, makecol(255,128,192), -1, "%s",tabJoueurs[numJoueur].pseudo);
            textprintf_ex(page, font, 10, 727, makecol(255,255,255), -1, "%s",tabJoueurs[numJoueur].choixClasse);
            //textprintf_ex(page, font, 10, 735, makecol(255,255,255), -1, "LOGO CLASSE");
            textprintf_ex(page, font, 125, 715, makecol(255,255,255), -1, "|        STATS       |");
            textprintf_ex(page, font, 125, 737, makecol(255,255,255), -1, "| PV = %d    |", tabJoueurs[numJoueur].PV);
            textprintf_ex(page, font, 125, 747, makecol(255,255,255), -1, "| PA = %d     |", tabJoueurs[numJoueur].PA);
            textprintf_ex(page, font, 125, 757, makecol(255,255,255), -1, "| PM = %d      |", tabJoueurs[numJoueur].PM);
            //textprintf_ex(page, font, 350, 715, makecol(255,255,255), -1, "|POKEMON LA|");
        }
        else if(nbJoueurs==1) //Si c'est au joueur 2 de jouer
        {
            textprintf_ex(page, font, 10, 715, makecol(255,128,192), -1, "%s",tabJoueurs[numJoueur].pseudo);
            textprintf_ex(page, font, 10, 727, makecol(255,255,255), -1, "%s",tabJoueurs[numJoueur].choixClasse);
            //textprintf_ex(page, font, 10, 735, makecol(255,255,255), -1, "LOGO CLASSE");
            textprintf_ex(page, font, 125, 715, makecol(255,255,255), -1, "|        STATS       |");
            textprintf_ex(page, font, 125, 737, makecol(255,255,255), -1, "| PV = %d    |", tabJoueurs[numJoueur].PV);
            textprintf_ex(page, font, 125, 747, makecol(255,255,255), -1, "| PA = %d     |", tabJoueurs[numJoueur].PA);
            textprintf_ex(page, font, 125, 757, makecol(255,255,255), -1, "| PM = %d      |", tabJoueurs[numJoueur].PM);
            //textprintf_ex(page, font, 350, 715, makecol(255,255,255), -1, "|POKEMON LA|");
        }
        else if(nbJoueurs==2) //Si c'est au joueur 3 de jouer
        {
            textprintf_ex(page, font, 10, 715, makecol(255,128,192), -1, "%s",tabJoueurs[numJoueur].pseudo);
            textprintf_ex(page, font, 10, 727, makecol(255,255,255), -1, "%s",tabJoueurs[numJoueur].choixClasse);
            //textprintf_ex(page, font, 10, 735, makecol(255,255,255), -1, "LOGO CLASSE");
            textprintf_ex(page, font, 125, 715, makecol(255,255,255), -1, "|        STATS       |");
            textprintf_ex(page, font, 125, 737, makecol(255,255,255), -1, "| PV = %d    |", tabJoueurs[numJoueur].PV);
            textprintf_ex(page, font, 125, 747, makecol(255,255,255), -1, "| PA = %d     |", tabJoueurs[numJoueur].PA);
            textprintf_ex(page, font, 125, 757, makecol(255,255,255), -1, "| PM = %d      |", tabJoueurs[numJoueur].PM);
            //textprintf_ex(page, font, 350, 715, makecol(255,255,255), -1, "|POKEMON LA|");
        }
        else if(nbJoueurs==3) //Si c'est au joueur 4 de jouer
        {
            textprintf_ex(page, font, 10, 715, makecol(255,128,192), -1, "%s",tabJoueurs[numJoueur].pseudo);
            textprintf_ex(page, font, 10, 727, makecol(255,255,255), -1, "%s",tabJoueurs[numJoueur].choixClasse);
            //textprintf_ex(page, font, 10, 735, makecol(255,255,255), -1, "LOGO CLASSE");
            textprintf_ex(page, font, 125, 715, makecol(255,255,255), -1, "|        STATS       |");
            textprintf_ex(page, font, 125, 737, makecol(255,255,255), -1, "| PV = %d    |", tabJoueurs[numJoueur].PV);
            textprintf_ex(page, font, 125, 747, makecol(255,255,255), -1, "| PA = %d     |", tabJoueurs[numJoueur].PA);
            textprintf_ex(page, font, 125, 757, makecol(255,255,255), -1, "| PM = %d      |", tabJoueurs[numJoueur].PM);
            //textprintf_ex(page, font, 350, 715, makecol(255,255,255), -1, "|POKEMON LA|");
        }
    }
}
/*-----------------------------------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------------------------------*/
void tourJoueur(t_joueur *tabJoueurs,int numJoueur, int nbJoueurs, BITMAP* decor, BITMAP* page,BITMAP* spriteDresseur[4][16])
{
    ///Déclarations bitmaps

    int clic=0;
    int deplaceIndispo1= deplace(decor,page,spriteDresseur,tabJoueurs,numJoueur, nbJoueurs);
    int deplaceIndispo2= deplace(decor,page,spriteDresseur,tabJoueurs,numJoueur, nbJoueurs);

    //Boucle de jeu
    while (clic == 0){

            affichageStats(page,tabJoueurs,nbJoueurs,numJoueur);
            /*if(tab[numJoueur].vivant=0)//si joueur mort on passe le tour
            {
                clear_bitmap(spriteDresseur);
                clic=1;
            }*/
            //Déplacement
            if(deplaceIndispo1 != 1)
            {
                deplace(decor,page,spriteDresseur,tabJoueurs,numJoueur, nbJoueurs);
            }

            if(deplaceIndispo2 != 2)
            {
                deplace(decor,page,spriteDresseur,tabJoueurs,numJoueur, nbJoueurs);
            }

            //Attaques
            if(tabJoueurs[numJoueur].PA <= 15 && tabJoueurs[numJoueur].PA > 0)
            {
                //Attaque corps à corps
                if(mouse_x>=415 && mouse_x<=585 && mouse_y>=434 && mouse_y<=532 && (mouse_b & 1))
                {
                    clic=1;
                    //attaqueCaC();
                }

                //Attaque avec sorts
                if(mouse_x>=415 && mouse_x<=585 && mouse_y>=434 && mouse_y<=532 && (mouse_b & 1))
                {
                    clic=1;
                    //attaqueSorts();
                }
            }

            //Joueur suivant
            if(mouse_x>=415 && mouse_x<=585 && mouse_y>=434 && mouse_y<=532 && (mouse_b & 1))
            {
                clic=1; //Fin du tour
            }

    }

}
/*-----------------------------------------------------------------------------------------------------*/
void attaque(BITMAP* decor,BITMAP* page, t_joueur *tab, BITMAP* spritePokemon[4],BITMAP* spritePokeattaque[4][4], BITMAP* spriteDresseur[4][16],int nbrjoueurs, int numJoueur)
{
    srand(time(NULL));

        decor= load_bitmap("mapJeu.bmp", NULL );



    if (!decor)
    {
        allegro_message("Nous n'avons pas pu charger  mapJeu.bmp ");
        quitterAllegro();
    }



   int i;

    int clic=0;
    int clic2=0;
    int j;                                        /// joueur victime
    int s,f,g,h,q,x,y,z,a,b;
                 ///variables aléatoires



    //si compteur à plus de trois alors il se réinitialise
    if(tab[numJoueur].cpt>3)
    {
        tab[numJoueur].PA=15;
        tab[numJoueur].cpt=0;

    }
    //affiche de la map avec les bitmap des pokémons

 allegro_message("veuillez cliquer sur le joueur à attaquer");


        while(clic==0)
        {

        blit(decor, page, 0, 0, 0, 0, decor->w,decor->h);

       for (i=0; i<nbrjoueurs; i++){
        draw_sprite(page, spriteDresseur[i][0], tab[i].colonne*64, tab[i].ligne*64);
        }
       draw_sprite(page, spritePokemon[tab[numJoueur].classe], 662, 631);


        //Si clic gauche souris cliqué
    if ((mouse_b &1)){

        for (j=0; j<nbrjoueurs; j++){
               if ((j!=numJoueur)&&(mouse_x/64>=tab[j].colonne) &&(mouse_x/64<=(tab[j].colonne)+1) &&(mouse_y/64>=tab[j].ligne)&&(mouse_y/64<=(tab[j].ligne)+1)) {
                    j=j;
                clic=1;
                 allegro_message("BRAVO");


            }
        }

     }

     blit(page, screen, 0, 0, 0, 0, decor->w,decor->h);

        }






       if(tab[numJoueur].PA>=10)//si PA est supérieure à 10
    {

    allegro_message("veuillez cliquer sur le type d'attaque en selectionnant");


      while(clic2==0)
        {

     //  clear_bitmap(page);
        blit(decor, page, 0, 0, 0, 0, decor->w,decor->h);
        for (i=0; i<nbrjoueurs; i++){
        draw_sprite(page, spriteDresseur[i][0], tab[i].colonne*64, tab[i].ligne*64);
        }
        draw_sprite(page, spritePokemon[tab[numJoueur].classe], 732, 690);


    //Si clic gauche souris cliqué
    if (mouse_b & 1)
                {
            //collision proche(1case)

                if(mouse_x>=732 && mouse_x<=789 && mouse_y>=690 && mouse_y<=768 ) //Si souris clique 'attaque corps' du dresseur
                {
                    if((tab[j].ligne==tab[numJoueur].ligne+1 || tab[j].ligne==tab[numJoueur].ligne-1) &&(tab[j].colonne==tab[numJoueur].colonne+1 || tab[j].colonne==tab[numJoueur].colonne-1))
                    {
                        h=rand()%(10-1+1)+1;
                        if(h!=1)
                        {
                            tab[numJoueur].PA=tab[numJoueur].PA-1;
                            x=rand()%(30-10+1)+10;
                            tab[j].PV=tab[j].PV-x;
                            animationAttaque(spritePokeattaque, tab[numJoueur].classe, tab[j].classe, 1);
                           // printf("PV restant: %d, PV pris : %d du joueur %d\n",tab[j].PV,x,j);
                        }
                        else
                        {
                            allegro_message("rate");
                        }
                        printf("Attaque 1");
                        clic2=1;
                        }
                    else
                    {
                        allegro_message("Impossible");
                    }
                }
                            //collision loin(2cases)
                if(mouse_x>=790 && mouse_x<=847 && mouse_y>=690 && mouse_y<=768)//Si souris clique 'sort1' du dresseur
                {
                    if((tab[j].ligne==tab[numJoueur].ligne+2 || tab[j].ligne==tab[numJoueur].ligne-2) &&(tab[j].colonne==tab[numJoueur].colonne+2 || tab[j].colonne==tab[numJoueur].colonne-2))
                    {
                        s=rand()%(5-1+1)+1;
                        if(s>1)
                        {
                            tab[numJoueur].PA=tab[numJoueur].PA-2;
                            y=rand()%(40-20+1)+20;
                            tab[j].PV=tab[j].PV-y;
                             animationAttaque(spritePokeattaque, tab[numJoueur].classe, tab[j].classe, 2);
                           // printf("PV restant : %d, PV pris : %d du joueur %d\n",tab[j].PV,y,j);
                        }
                        else
                        {
                            allegro_message("rate");
                        }
                        printf("Attaque 2");
                        clic2=1;
                    }
                    else
                    {
                        allegro_message("Impossible");
                    }
                }
                            //collision loin(3cases)
                if(mouse_x>=848 && mouse_x<=905 && mouse_y>=690 && mouse_y<=768)//si souris clique 'sort2' du dresseur//189 218 339 378
                {
                    if((tab[j].ligne<=tab[numJoueur].ligne+3 || tab[j].ligne>=tab[numJoueur].ligne-3) &&(tab[j].colonne<=tab[numJoueur].colonne+3 || tab[j].colonne>=tab[numJoueur].colonne-3))
                    {
                        f=rand()%(10-1+1)+1;
                            if(f>3)
                            {
                                tab[numJoueur].PA=tab[numJoueur].PA-3;
                                z=rand()%(60-40+1)+40;
                                tab[j].PV=tab[j].PV-z;
                                 animationAttaque(spritePokeattaque, tab[numJoueur].classe, tab[j].classe, 3);
                                //printf("PV restant: %d, PV pris : %d du joueur %d\n",tab[j].PV,z,j);
                            }
                            else
                            {
                                allegro_message("rate");
                            }
                            printf("Attaque 3");
                            clic2=1;
                            }
                    else
                    {
                        allegro_message("Impossible");
                    }
                }
                if(mouse_x>=906 && mouse_x<=963 && mouse_y>=690 && mouse_y<=768)//si souris clique 'sort3' du dresseur
                {
                    g=rand()%(5-1+1)+1;
                    if(g>2)
                    {
                        tab[numJoueur].PA=tab[numJoueur].PA-4;
                        a=rand()%(60-20+1)+20;
                        tab[numJoueur].PV=tab[numJoueur].PV+a;
                         animationAttaque(spritePokeattaque, tab[numJoueur].classe, tab[j].classe, 4);
                       // printf("PV restant:%d, PV donnee : %d au joueur %d\n",tab[numJoueur].PV,a,numJoueur);
                    }
                    else
                    {
                        allegro_message("rate");
                    }
                    printf("Attaque 4");
                    clic2=1;
                }
                            //collision loin 4 cases
                if(mouse_x>=964 && mouse_x<=1022 && mouse_y>=690 && mouse_y<=768)//si souris clique 'sort4' du dresseur
                {
                    if((tab[j].ligne<=tab[numJoueur].ligne+4 || tab[j].ligne>=tab[numJoueur].ligne-4) &&(tab[j].colonne<=tab[numJoueur].colonne+3 || tab[j].colonne>=tab[numJoueur].colonne-3))
                    {
                        q=rand()%(2-1+1)+1;
                        if(q!=1)
                        {
                            tab[numJoueur].PA=tab[numJoueur].PA-5;
                            b=rand()%(100-70+1)+70;
                            tab[j].PV=tab[j].PV-b;
                             animationAttaque(spritePokeattaque, tab[numJoueur].classe, tab[j].classe, 5);
                          //  printf("PV restant : %d, PV pris: %d du joueur %d\n",tab[j].PV,b,j);
                        }
                        else
                        {
                            allegro_message("rate");
                        }
                        printf("Attaque 5");
                        clic2=1;
                    }
                    else
                    {
                        allegro_message("Impossible");
                    }
                }
            }
            blit(page, screen, 0, 0, 0, 0, decor->w,decor->h);
        }
        tab[numJoueur].cpt++;  //compteur plus 1
    }
    else if(tab[numJoueur].PA>=5 && tab[numJoueur].PA<10)
    {
         allegro_message("veuillez cliquer sur le type d'attaque en selectionnan");

        while(clic2==0)
        {

                   clear_bitmap(page);
        blit(decor, page, 0, 0, 0, 0, decor->w,decor->h);
        for (i=0; i<nbrjoueurs; i++){
        draw_sprite(page, spriteDresseur[i][0], tab[i].colonne*64, tab[i].ligne*64);
        }
        draw_sprite(page, spritePokemon[tab[numJoueur].classe], 732, 690);


                                    //Si clic gauche souris cliqué
            if (mouse_b & 1)
            {
                        //collision proche(1case)
                if(mouse_x>=732 && mouse_x<=789  && mouse_y>=690 && mouse_y<=768  ) //Si souris clique 'attaque corps' du dresseur
                {
                    if((tab[j].ligne==tab[numJoueur].ligne+1 || tab[j].ligne==tab[numJoueur].ligne-1) &&(tab[j].colonne==tab[numJoueur].colonne+1 || tab[j].colonne==tab[numJoueur].colonne-1))
                    {
                        h=rand()%(10-1+1)+1;
                        if(h!=1)
                        {
                            tab[numJoueur].PA=tab[numJoueur].PA-1;
                            x=rand()%(30-10+1)+10;
                            tab[j].PV=tab[j].PV-x;
                             animationAttaque(spritePokeattaque, tab[numJoueur].classe, tab[j].classe, 1);
                           // printf("PV restant: %d, PV pris : %d du joueur %d\n",tab[j].PV,x,j);
                        }
                        else
                        {
                            allegro_message("rate");
                        }
                        printf("Attaque 1");
                        clic2=1;
                        }
                    else
                    {
                        allegro_message("Impossible");
                    }
                }
                            //collision loin(2cases)
                if(mouse_x>=790 && mouse_x<=847 && mouse_y>=690 && mouse_y<=768)//Si souris clique 'sort1' du dresseur
                {
                    if((tab[j].ligne==tab[numJoueur].ligne+2 || tab[j].ligne==tab[numJoueur].ligne-2) &&(tab[j].colonne==tab[numJoueur].colonne+2 || tab[j].colonne==tab[numJoueur].colonne-2))
                    {
                        s=rand()%(5-1+1)+1;
                        if(s>1)
                        {
                            tab[numJoueur].PA=tab[numJoueur].PA-2;
                            y=rand()%(40-20+1)+20;
                            tab[j].PV=tab[j].PV-y;
                             animationAttaque(spritePokeattaque, tab[numJoueur].classe, tab[j].classe, 2);
                           // printf("PV restant : %d, PV pris : %d du joueur %d\n",tab[j].PV,y,j);
                        }
                        else
                        {
                            allegro_message("rate");
                        }
                        printf("Attaque 2");
                        clic2=1;
                    }
                    else
                    {
                        allegro_message("Impossible");
                    }
                }
                            //collision loin(3cases)
                if(mouse_x>=848 && mouse_x<=905 && mouse_y>=690 && mouse_y<=768)//si souris clique 'sort2' du dresseur//189 218 339 378
                {
                    if((tab[j].ligne<=tab[numJoueur].ligne+3 || tab[j].ligne>=tab[numJoueur].ligne-3) &&(tab[j].colonne<=tab[numJoueur].colonne+3 || tab[j].colonne>=tab[numJoueur].colonne-3))
                    {
                        f=rand()%(10-1+1)+1;
                            if(f>3)
                            {
                                tab[numJoueur].PA=tab[numJoueur].PA-3;
                                z=rand()%(60-40+1)+40;
                                tab[j].PV=tab[j].PV-z;
                                 animationAttaque(spritePokeattaque, tab[numJoueur].classe, tab[j].classe, 3);
                               // printf("PV restant: %d, PV pris : %d du joueur %d\n",tab[j].PV,z,j);
                            }
                            else
                            {
                                allegro_message("rate");
                            }
                            printf("Attaque 3");
                            clic2=1;
                            }
                    else
                    {
                        allegro_message("Impossible");
                    }
                }
                if(mouse_x>=906 && mouse_x<=963 && mouse_y>=690 && mouse_y<=768)//si souris clique 'sort3' du dresseur
                {
                    g=rand()%(5-1+1)+1;
                    if(g>2)
                    {
                        tab[numJoueur].PA=tab[numJoueur].PA-4;
                        a=rand()%(60-20+1)+20;
                        tab[numJoueur].PV=tab[numJoueur].PV+a;
                         animationAttaque(spritePokeattaque, tab[numJoueur].classe, tab[j].classe, 4);
                        //printf("PV restant:%d, PV donnee : %d au joueur %d\n",tab[numJoueur].PV,a,numJoueur);
                    }
                    else
                    {
                        allegro_message("rate");
                    }
                    printf("Attaque 4");
                    clic2=1;
                }
                            //collision loin 4 cases
                if(mouse_x>=964 && mouse_x<=1022 && mouse_y>=690 && mouse_y<=768)//si souris clique 'sort4' du dresseur
                {
                    if((tab[j].ligne<=tab[numJoueur].ligne+4 || tab[j].ligne>=tab[numJoueur].ligne-4) &&(tab[j].colonne<=tab[numJoueur].colonne+3 || tab[j].colonne>=tab[numJoueur].colonne-3))
                    {
                        q=rand()%(2-1+1)+1;
                        if(q!=1)
                        {
                            tab[numJoueur].PA=tab[numJoueur].PA-5;
                            b=rand()%(100-70+1)+70;
                            tab[j].PV=tab[j].PV-b;
                             animationAttaque(spritePokeattaque, tab[numJoueur].classe, tab[j].classe, 5);
                         //   printf("PV restant : %d, PV pris: %d du joueur %d\n",tab[j].PV,b,j);
                        }
                        else
                        {
                            allegro_message("rate");
                        }
                        printf("Attaque 5");
                        clic2=1;
                    }
                    else
                    {
                        allegro_message("Impossible");
                    }
                }
            }
            blit(page, screen, 0, 0, 0, 0, decor->w,decor->h);
        }
        tab[numJoueur].cpt++;  //compteur plus 1
    }

    else if(tab[1].PA<5)
        {
             allegro_message("veuillez cliquer sur le type d'attaque en selectionnan");


        while(clic2==0)
        {

                   clear_bitmap(page);
        blit(decor, page, 0, 0, 0, 0, decor->w,decor->h);
        for (i=0; i<nbrjoueurs; i++){
        draw_sprite(page, spriteDresseur[i][0], tab[i].colonne*64, tab[i].ligne*64);
        }
        draw_sprite(page, spritePokemon[tab[numJoueur].classe], 732, 690);

                                    //Si clic gauche souris cliqué
            if (mouse_b & 1)
            {
                        //collision proche(1case)
                if(mouse_x>=732 && mouse_x<=789 && mouse_y>=690 && mouse_y<=768  ) //Si souris clique 'attaque corps' du dresseur
                {
                    if((tab[j].ligne==tab[numJoueur].ligne+1 || tab[j].ligne==tab[numJoueur].ligne-1) &&(tab[j].colonne==tab[numJoueur].colonne+1 || tab[j].colonne==tab[numJoueur].colonne-1))
                    {
                        h=rand()%(10-1+1)+1;
                        if(h!=1)
                        {
                            tab[numJoueur].PA=tab[numJoueur].PA-1;
                            x=rand()%(30-10+1)+10;
                            tab[j].PV=tab[j].PV-x;
                             animationAttaque(spritePokeattaque, tab[numJoueur].classe, tab[j].classe, 1);
                           // printf("PV restant: %d, PV pris : %d du joueur %d\n",tab[j].PV,x,j);
                        }
                        else
                        {
                            allegro_message("rate");
                        }
                        printf("Attaque 1");
                        clic2=1;
                        }
                    else
                    {
                        allegro_message("Impossible");
                    }
                }
                            //collision loin(2cases)
                if(mouse_x>=790 && mouse_x<=847 && mouse_y>=690 && mouse_y<=768)//Si souris clique 'sort1' du dresseur
                {
                    if((tab[j].ligne==tab[numJoueur].ligne+2 || tab[j].ligne==tab[numJoueur].ligne-2) &&(tab[j].colonne==tab[numJoueur].colonne+2 || tab[j].colonne==tab[numJoueur].colonne-2))
                    {
                        s=rand()%(5-1+1)+1;
                        if(s>1)
                        {
                            tab[numJoueur].PA=tab[numJoueur].PA-2;
                            y=rand()%(40-20+1)+20;
                            tab[j].PV=tab[j].PV-y;
                             animationAttaque(spritePokeattaque, tab[numJoueur].classe, tab[j].classe, 2);
                           // printf("PV restant : %d, PV pris : %d du joueur %d\n",tab[j].PV,y,j);
                        }
                        else
                        {
                            allegro_message("rate");
                        }
                        printf("Attaque 2");
                        clic2=1;
                    }
                    else
                    {
                        allegro_message("Impossible");
                    }
                }
                            //collision loin(3cases)
                if(mouse_x>=848 && mouse_x<=905 && mouse_y>=690 && mouse_y<=768)//si souris clique 'sort2' du dresseur//189 218 339 378
                {
                    if((tab[j].ligne<=tab[numJoueur].ligne+3 || tab[j].ligne>=tab[numJoueur].ligne-3) &&(tab[j].colonne<=tab[numJoueur].colonne+3 || tab[j].colonne>=tab[numJoueur].colonne-3))
                    {
                        f=rand()%(10-1+1)+1;
                            if(f>3)
                            {
                                tab[numJoueur].PA=tab[numJoueur].PA-3;
                                z=rand()%(60-40+1)+40;
                                tab[j].PV=tab[j].PV-z;
                                 animationAttaque(spritePokeattaque, tab[numJoueur].classe, tab[j].classe, 3);
                            //    printf("PV restant: %d, PV pris : %d du joueur %d\n",tab[j].PV,z,j);
                            }
                            else
                            {
                                allegro_message("rate");
                            }
                            printf("Attaque 3");
                            clic2=1;
                            }
                    else
                    {
                        allegro_message("Impossible");
                    }
                }
                if(mouse_x>=906 && mouse_x<=963 && mouse_y>=690 && mouse_y<=768)//si souris clique 'sort3' du dresseur
                {
                    g=rand()%(5-1+1)+1;
                    if(g>2)
                    {
                        tab[numJoueur].PA=tab[numJoueur].PA-4;
                        a=rand()%(60-20+1)+20;
                        tab[numJoueur].PV=tab[numJoueur].PV+a;
                         animationAttaque(spritePokeattaque, tab[numJoueur].classe, tab[j].classe, 4);
                      //  printf("PV restant:%d, PV donnee : %d au joueur %d\n",tab[numJoueur].PV,a,numJoueur);
                    }
                    else
                    {
                        allegro_message("rate");
                    }
                    printf("Attaque 4");
                    clic2=1;
                }

                if(mouse_x>=964 && mouse_x<=1022 && mouse_y>=690 && mouse_y<=768)//si souris clique 'sort4' du dresseur
                {
                        allegro_message("Impossible");
                }
            }
            blit(page, screen, 0, 0, 0, 0, decor->w,decor->h);
        }
        tab[numJoueur].cpt++;  //compteur plus 1
    }

}


/*-----------------------------------------------------------------------------------------------------*/


void animationAttaque(BITMAP* spritePokeAttack[4][4], int classeAttaquant,int classeVictime, int typeAttaque){


    int i;

    BITMAP* attaqueAnim1;
    BITMAP* attaqueAnim2;
    BITMAP* page= create_bitmap(1024, 768);


    attaqueAnim1=load_bitmap("animeAttaque1.bmp", NULL);
    attaqueAnim2=load_bitmap("animeAttaque2.bmp", NULL);


    for (i=0; i<2000; i++){
        blit(attaqueAnim1, page, 0, 0, 0, 0, page->w,page->h);
        blit(page, screen, 0, 0, 0, 0, page->w,page->h );
    }

    clear_bitmap(page);


        for (i=0; i<2000; i++){
        blit(attaqueAnim2, page, 0, 0, 0, 0, page->w,page->h);

       draw_sprite(page, spritePokeAttack[classeAttaquant][typeAttaque], 60, 300);
        draw_sprite(page, spritePokeAttack[classeAttaquant][typeAttaque], 640, 145);
       // masked_stretch_blit(spritePokeAttack[classeAttaquant][typeAttaque],page , 0, 0, 58, 78,60, 300, 58*7, 78*7);
        // masked_stretch_blit(spritePokeAttack[classeVictime][typeAttaque],page,  0, 0,640, 145, 58*4, 78*4);
        blit(page, screen, 0, 0, 0, 0, page->w,page->h );
    }


}
/*-----------------------------------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------------------------------*/
int classement(t_joueur*tab,int numJoueur,int nbJoueurs){
    if(tab[numJoueur].PV<=0)
    {
        tab[numJoueur].vivant=0;
        tab[numJoueur].classement=nbJoueurs;
        nbJoueurs--;
        return nbJoueurs;
    }
    if(nbJoueurs=1)
    {
        tab[numJoueur].classement=1;
        return nbJoueurs;
    }
    else
    {
        return nbJoueurs;
    }
}
/*-----------------------------------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------------------------------*/
int affichefin(int numJoueurs,  t_joueur*tab){

    int i=0, a=0, x=0;
    int clic=0;

    clear_bitmap(screen);

    ///Chargements des Bitmaps
    /******************************************************************************/
    BITMAP* Fond;
    Fond = load_bitmap("menuStart.bmp",NULL);

    if (!Fond)
    {
        allegro_message("Nous n'avons pas pu charger \"menuStart.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/
    BITMAP* plan;
    plan = load_bitmap("affichefin.bmp",NULL);

    if (!plan)
    {
        allegro_message("Nous n'avons pas pu charger \"affichefin.bmp\"");
        quitterAllegro();
    }
    /******************************************************************************/

    draw_sprite(Fond,plan,152,445);

    textprintf_ex(Fond, font,250,550, makecol(255, 255, 255),-1,"LE CLASSEMENT :");
    textprintf_ex(Fond, font,250,552, makecol(255, 255, 255),-1,"_______________");
    for(i=1; i<=numJoueurs; i++)
    {
        textprintf_ex(Fond, font,250,600+x, makecol(255, 255, 255),-1,"%s ton classement est %d",tab[i].pseudo,tab[i].classement);
        x=x+20;

    }

    blit(Fond,screen,0,0,0,0,1024,768);

    while(clic==0)
    {
        if(mouse_b & 1)
        {
            if(mouse_x>=152 && mouse_x<=252 && mouse_y>=445 && mouse_y<=524)
            {
                  printf("Nouvelle partie");
                  clic=1;
                  t=1;
                  return t;
            }
            else if(mouse_x>=299 && mouse_x<=499 && mouse_y>=445 && mouse_y<=524)
            {
                  printf("Menu");
                  clic=1;
                  t=2;
                  return t;
            }
            else if(mouse_x>=545 && mouse_x<=745 && mouse_y>=445 && mouse_y<=524)
            {
                quitterAllegro();
            }
        }
    }
}
